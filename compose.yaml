name: neverexpire
services:
  web:
    build: .
    image: neverexpire:latest
    command: ["./app"]
    env_file: ".env"
    environment:
      - APP_ENV=production
      - POSTGRES_HOST=postgres
      - REDIS_HOST=redis
    ports:
      - "3000"
    depends_on:
      migrate:
        condition: service_completed_successfully
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - app
    restart: unless-stopped
  worker:
    build: .
    image: neverexpire:latest
    command: ["./service"]
    env_file: ".env"
    environment:
      - APP_ENV=production
      - POSTGRES_HOST=postgres
      - REDIS_HOST=redis
    depends_on:
      migrate:
        condition: service_completed_successfully
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - app
    restart: unless-stopped
  redis:
    image: redis
    ports:
      - "6379:6379"
    volumes:
      - redis:/var/lib/redis
    networks:
      - app
  postgres:
    image: postgres:17.4
    environment:
      - POSTGRES_USER=$POSTGRES_USER
      - POSTGRES_PASSWORD=$POSTGRES_PASSWORD
      - POSTGRES_DB=$POSTGRES_DB
    ports:
      - "${POSTGRES_HOST_PORT}:${POSTGRES_DOCKER_PORT}"
    volumes:
      - db:/var/lib/postgres
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d ${POSTGRES_DB} -U ${POSTGRES_USER}"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - app
  migrate:
    build:
      context: .
      dockerfile_inline: |
        FROM migrate/migrate:latest
        COPY db/migrations /migrations
    depends_on:
      postgres:
        condition: service_healthy
    command:
      [
        "-path",
        "/migrations/",
        "-database",
        "postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:${POSTGRES_DOCKER_PORT}/${POSTGRES_DB}?sslmode=disable",
        "up",
      ]
    networks:
      - app
  caddy:
    build:
      context: .
      dockerfile_inline: |
        FROM caddy:latest
        COPY Caddyfile /etc/caddy/Caddyfile
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - web
    networks:
      - app
    volumes:
      - caddy_data:/data
  cron:
    build:
      context: ./utils/cron
      dockerfile: Dockerfile
    depends_on:
      migrate:
        condition: service_completed_successfully
      postgres:
        condition: service_healthy
    networks:
      - app
    env_file: ".env"

volumes:
  redis:
  db:
  caddy_data:

networks:
  app:
